---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Loan.
--- DateTime: 24/06/2018 17:52
---
local MameCst = require("mameLuaConstants")
require("class")
require("creature")

Generation = class(function (this, size, map, inputsManager, creatureDrawX, creatureDrawY)
    this.generationNumber = 1
    this.creatures = {}
    this.size = size
    this.creaturesSortedByFitness = {}
    this.creatureDrawX = creatureDrawX
    this.creatureDrawY = creatureDrawY

    for i = 1, size do
        local randomCreature = Creature(map, inputsManager, {}, MameCst.screen, MameCst.ioP1, creatureDrawX, creatureDrawY)
        table.insert(this.creatures, randomCreature)
    end
    this:resetBestFitnessList()

    this.currentCreatureCounter = 0
end)

function Generation:resetBestFitnessList()
    for i = 1, self.size do
        self.creaturesSortedByFitness[i] = nil
    end
end

function Generation:randomizeAll()
    for i = 1, self.size do
        self.creatures[i]:randomize(i)
    end
end

function Generation:getNextCreature()
    self.currentCreatureCounter = self.currentCreatureCounter + 1
    while(self.creatures[self.currentCreatureCounter]:isTested()) do
        self.currentCreatureCounter = self.currentCreatureCounter + 1
    end
    return self.creatures[self.currentCreatureCounter]
end

function Generation:lastCreatureDie()
    return self.currentCreatureCounter == self.size
end

function Generation:reGenerate()
    -- Assuming the fitness list is sorted, we keep the best first half
    local sDiv2 = self.size // 2
    for i = 1, sDiv2 do
        local bestICreature = self.creaturesSortedByFitness[#self.creaturesSortedByFitness-(i-1)]
        self.creatures[i] = bestICreature

        local mutatedBestCreature = bestICreature:copy()
        mutatedBestCreature:mutate()
        self.creatures[i+sDiv2] = mutatedBestCreature
    end

    self.currentCreatureCounter = 0
    self.generationNumber = self.generationNumber + 1
    self:resetBestFitnessList()

end

function Generation:creatureIsDead()
    local creature = self.creatures[self.currentCreatureCounter]
    local creatureFitness = creature:getFitness()

    -- TODO : can be optimize using dichotomy (here it's O(size))
    local indToInsert = 1
    for j = 1, #self.creaturesSortedByFitness do
        if (self.creaturesSortedByFitness[indToInsert] ~= nil and self.creaturesSortedByFitness[indToInsert]:getFitness() < creatureFitness) then
            indToInsert = indToInsert + 1
        end
    end
    table.insert(self.creaturesSortedByFitness, indToInsert, creature)


    if (self:lastCreatureDie()) then
        self:reGenerate()
    end
end

function Generation:draw()
    local s = MameCst.screen
    local textX = self.creatureDrawX
    local textY = self.creatureDrawY
    local text = "\nGeneration : " .. self.generationNumber .. " \tSpecies : " .. self.currentCreatureCounter
    s:draw_text(textX+0.5, textY, text, 0xff000000)
    s:draw_text(textX, textY, text, 0xffffffff)

end

function Generation:__tostring()
    local ret = ""
    ret = ret .. "Generation " .. self.generationNumber
    for i, v in pairs(self.creatures) do
        ret = ret .. i .. " : " .. tostring(v) .. "\n"
    end
    return ret
end
